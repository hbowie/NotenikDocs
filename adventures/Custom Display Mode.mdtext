Title:  Custom Display Mode

Tags:   display mode, display tab, merge-templates

Status: 6 - Completed

Seq:    13

Date:   2024-07-17

Author: Herb Bowie

Teaser:

Notenik 14.9.0 adds a new custom display mode. 


Timestamp: 20240716222135

Date Added: 2024-07-16 15:21:35 -0700

Date Modified: 2024-07-17 08:27:39 -0700

Body:

I love the way Notenik manages to evolve gracefully over time. 

At some point I added a [Streamlined Reading](https://notenik.app/kb/streamlined-reading.html) option for a Notenik Collection, which tried to make it easy to read the notes in a collection much as if they were the chapters in a book -- partly by minimizing the display of detailed metadata. 

Then later I added a [Presentation mode](https://notenik.app/kb/presentation-mode.html), which was also streamlined, but which did not reveal the title of the next note/slide before actually advancing to it. 

And then later I added a [Quotations mode](https://notenik.app/kb/quotations-mode.html), designed to display a collection of quotations in a highly readable fashion. 

So at this point I decided to generalize this to a [Collection Display Mode setting](https://notenik.app/kb/tailor-collection-settings.html), supporting the selection of any of these modes.

And then I received a request to support an [Optional Display Switch](https://discourse.notenik.app/t/optional-display-switch/410?u=hbowie), to allow a user to temporarily switch their display back to normal mode, when using a custom merge template to [tailor the display](https://notenik.app/kb/tailor-the-display.html). 

And then... rather than adding yet another display switching mechanism, I simply added a Display mode of `Custom` that would be automatically set on the detection of a `display.html` merge template, but which would then allow the user to select the `Normal` display mode, and then re-select `Custom` whenever they wanted to return to their custom display. 

It gives me great satisfaction to continue to address new enhancement opportunities, and find ways to gracefully integrate them into the code base and into the user experience.
